//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace TeaCommerce.PaymentProviders.PayerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PaymentGateway", Namespace="https://secure.pay-read.se")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(OrderEntry))]
    public partial class PaymentGateway : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestAddIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIdByTransactionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTokenByLoginInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTokenByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTariffOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTariffOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceTimerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyServiceTimerOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DestroySessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSessionExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSessionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleDebitExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleDebitOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateInvoiceEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Authorize3DSOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SettleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthReverseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIdByDialCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDialCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePartnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDirectOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PaymentGateway() {
            this.Url = "https://secure.pay-read.se/soap/PayReadSoapServer_V2.cgi";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestAddIntCompletedEventHandler TestAddIntCompleted;
        
        /// <remarks/>
        public event GetUserIdByTransactionIdCompletedEventHandler GetUserIdByTransactionIdCompleted;
        
        /// <remarks/>
        public event GetUserTokenByLoginInfoCompletedEventHandler GetUserTokenByLoginInfoCompleted;
        
        /// <remarks/>
        public event GetUserTokenByUserIdCompletedEventHandler GetUserTokenByUserIdCompleted;
        
        /// <remarks/>
        public event SetCustomerIdCompletedEventHandler SetCustomerIdCompleted;
        
        /// <remarks/>
        public event GetTariffCompletedEventHandler GetTariffCompleted;
        
        /// <remarks/>
        public event SetTariffCompletedEventHandler SetTariffCompleted;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event UserExistsCompletedEventHandler UserExistsCompleted;
        
        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;
        
        /// <remarks/>
        public event GetTransactionByIdCompletedEventHandler GetTransactionByIdCompleted;
        
        /// <remarks/>
        public event GetTransactionStatusCompletedEventHandler GetTransactionStatusCompleted;
        
        /// <remarks/>
        public event GetServiceTimerCompletedEventHandler GetServiceTimerCompleted;
        
        /// <remarks/>
        public event ModifyServiceTimerCompletedEventHandler ModifyServiceTimerCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event DestroySessionCompletedEventHandler DestroySessionCompleted;
        
        /// <remarks/>
        public event CreateSessionCompletedEventHandler CreateSessionCompleted;
        
        /// <remarks/>
        public event CreateSessionExCompletedEventHandler CreateSessionExCompleted;
        
        /// <remarks/>
        public event ChangeSessionIdCompletedEventHandler ChangeSessionIdCompleted;
        
        /// <remarks/>
        public event SimpleDebitExCompletedEventHandler SimpleDebitExCompleted;
        
        /// <remarks/>
        public event SimpleDebitCompletedEventHandler SimpleDebitCompleted;
        
        /// <remarks/>
        public event CreateInvoiceEntryCompletedEventHandler CreateInvoiceEntryCompleted;
        
        /// <remarks/>
        public event RegisterUserCompletedEventHandler RegisterUserCompleted;
        
        /// <remarks/>
        public event InitializeCompletedEventHandler InitializeCompleted;
        
        /// <remarks/>
        public event Authorize3DSCompletedEventHandler Authorize3DSCompleted;
        
        /// <remarks/>
        public event AuthorizeCompletedEventHandler AuthorizeCompleted;
        
        /// <remarks/>
        public event SettleCompletedEventHandler SettleCompleted;
        
        /// <remarks/>
        public event RefundCompletedEventHandler RefundCompleted;
        
        /// <remarks/>
        public event AuthReverseCompletedEventHandler AuthReverseCompleted;
        
        /// <remarks/>
        public event GetUserIdByDialCodeCompletedEventHandler GetUserIdByDialCodeCompleted;
        
        /// <remarks/>
        public event CreateDialCodeCompletedEventHandler CreateDialCodeCompleted;
        
        /// <remarks/>
        public event SimpleRefundCompletedEventHandler SimpleRefundCompleted;
        
        /// <remarks/>
        public event UpdatePartnerCompletedEventHandler UpdatePartnerCompleted;
        
        /// <remarks/>
        public event CreateDirectOrderCompletedEventHandler CreateDirectOrderCompleted;
        
        /// <remarks/>
        public event AddArticleCompletedEventHandler AddArticleCompleted;
        
        /// <remarks/>
        public event DeleteArticleCompletedEventHandler DeleteArticleCompleted;
        
        /// <remarks/>
        public event UpdateArticleCompletedEventHandler UpdateArticleCompleted;
        
        /// <remarks/>
        public event ChargeCompletedEventHandler ChargeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TestAddInt(int a, int b) {
            object[] results = this.Invoke("TestAddInt", new object[] {
                        a,
                        b});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TestAddIntAsync(int a, int b) {
            this.TestAddIntAsync(a, b, null);
        }
        
        /// <remarks/>
        public void TestAddIntAsync(int a, int b, object userState) {
            if ((this.TestAddIntOperationCompleted == null)) {
                this.TestAddIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestAddIntOperationCompleted);
            }
            this.InvokeAsync("TestAddInt", new object[] {
                        a,
                        b}, this.TestAddIntOperationCompleted, userState);
        }
        
        private void OnTestAddIntOperationCompleted(object arg) {
            if ((this.TestAddIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestAddIntCompleted(this, new TestAddIntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("UserId")]
        public string GetUserIdByTransactionId(string SessionId, int TransactionId) {
            object[] results = this.Invoke("GetUserIdByTransactionId", new object[] {
                        SessionId,
                        TransactionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIdByTransactionIdAsync(string SessionId, int TransactionId) {
            this.GetUserIdByTransactionIdAsync(SessionId, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetUserIdByTransactionIdAsync(string SessionId, int TransactionId, object userState) {
            if ((this.GetUserIdByTransactionIdOperationCompleted == null)) {
                this.GetUserIdByTransactionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIdByTransactionIdOperationCompleted);
            }
            this.InvokeAsync("GetUserIdByTransactionId", new object[] {
                        SessionId,
                        TransactionId}, this.GetUserIdByTransactionIdOperationCompleted, userState);
        }
        
        private void OnGetUserIdByTransactionIdOperationCompleted(object arg) {
            if ((this.GetUserIdByTransactionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIdByTransactionIdCompleted(this, new GetUserIdByTransactionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string GetUserTokenByLoginInfo(string SessionId, string UserId, string Password) {
            object[] results = this.Invoke("GetUserTokenByLoginInfo", new object[] {
                        SessionId,
                        UserId,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTokenByLoginInfoAsync(string SessionId, string UserId, string Password) {
            this.GetUserTokenByLoginInfoAsync(SessionId, UserId, Password, null);
        }
        
        /// <remarks/>
        public void GetUserTokenByLoginInfoAsync(string SessionId, string UserId, string Password, object userState) {
            if ((this.GetUserTokenByLoginInfoOperationCompleted == null)) {
                this.GetUserTokenByLoginInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTokenByLoginInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserTokenByLoginInfo", new object[] {
                        SessionId,
                        UserId,
                        Password}, this.GetUserTokenByLoginInfoOperationCompleted, userState);
        }
        
        private void OnGetUserTokenByLoginInfoOperationCompleted(object arg) {
            if ((this.GetUserTokenByLoginInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTokenByLoginInfoCompleted(this, new GetUserTokenByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string GetUserTokenByUserId(string SessionId, string UserId) {
            object[] results = this.Invoke("GetUserTokenByUserId", new object[] {
                        SessionId,
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTokenByUserIdAsync(string SessionId, string UserId) {
            this.GetUserTokenByUserIdAsync(SessionId, UserId, null);
        }
        
        /// <remarks/>
        public void GetUserTokenByUserIdAsync(string SessionId, string UserId, object userState) {
            if ((this.GetUserTokenByUserIdOperationCompleted == null)) {
                this.GetUserTokenByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTokenByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetUserTokenByUserId", new object[] {
                        SessionId,
                        UserId}, this.GetUserTokenByUserIdOperationCompleted, userState);
        }
        
        private void OnGetUserTokenByUserIdOperationCompleted(object arg) {
            if ((this.GetUserTokenByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTokenByUserIdCompleted(this, new GetUserTokenByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string SetCustomerId(string SessionId, string UserId, string CustomerId) {
            object[] results = this.Invoke("SetCustomerId", new object[] {
                        SessionId,
                        UserId,
                        CustomerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetCustomerIdAsync(string SessionId, string UserId, string CustomerId) {
            this.SetCustomerIdAsync(SessionId, UserId, CustomerId, null);
        }
        
        /// <remarks/>
        public void SetCustomerIdAsync(string SessionId, string UserId, string CustomerId, object userState) {
            if ((this.SetCustomerIdOperationCompleted == null)) {
                this.SetCustomerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomerIdOperationCompleted);
            }
            this.InvokeAsync("SetCustomerId", new object[] {
                        SessionId,
                        UserId,
                        CustomerId}, this.SetCustomerIdOperationCompleted, userState);
        }
        
        private void OnSetCustomerIdOperationCompleted(object arg) {
            if ((this.SetCustomerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomerIdCompleted(this, new SetCustomerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("TariffId")]
        public string GetTariff(string SessionId, string UserId, string CustomerId) {
            object[] results = this.Invoke("GetTariff", new object[] {
                        SessionId,
                        UserId,
                        CustomerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTariffAsync(string SessionId, string UserId, string CustomerId) {
            this.GetTariffAsync(SessionId, UserId, CustomerId, null);
        }
        
        /// <remarks/>
        public void GetTariffAsync(string SessionId, string UserId, string CustomerId, object userState) {
            if ((this.GetTariffOperationCompleted == null)) {
                this.GetTariffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTariffOperationCompleted);
            }
            this.InvokeAsync("GetTariff", new object[] {
                        SessionId,
                        UserId,
                        CustomerId}, this.GetTariffOperationCompleted, userState);
        }
        
        private void OnGetTariffOperationCompleted(object arg) {
            if ((this.GetTariffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTariffCompleted(this, new GetTariffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string SetTariff(string SessionId, string UserId, string CustomerId, string TariffId) {
            object[] results = this.Invoke("SetTariff", new object[] {
                        SessionId,
                        UserId,
                        CustomerId,
                        TariffId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetTariffAsync(string SessionId, string UserId, string CustomerId, string TariffId) {
            this.SetTariffAsync(SessionId, UserId, CustomerId, TariffId, null);
        }
        
        /// <remarks/>
        public void SetTariffAsync(string SessionId, string UserId, string CustomerId, string TariffId, object userState) {
            if ((this.SetTariffOperationCompleted == null)) {
                this.SetTariffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTariffOperationCompleted);
            }
            this.InvokeAsync("SetTariff", new object[] {
                        SessionId,
                        UserId,
                        CustomerId,
                        TariffId}, this.SetTariffOperationCompleted, userState);
        }
        
        private void OnSetTariffOperationCompleted(object arg) {
            if ((this.SetTariffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTariffCompleted(this, new SetTariffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string UpdateUser(string SessionId, string UserId, string FirstName, string LastName, string StreetAddress, string ZipCode, string Town, string Email, string Phone, string CellPhone) {
            object[] results = this.Invoke("UpdateUser", new object[] {
                        SessionId,
                        UserId,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Email,
                        Phone,
                        CellPhone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string SessionId, string UserId, string FirstName, string LastName, string StreetAddress, string ZipCode, string Town, string Email, string Phone, string CellPhone) {
            this.UpdateUserAsync(SessionId, UserId, FirstName, LastName, StreetAddress, ZipCode, Town, Email, Phone, CellPhone, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string SessionId, string UserId, string FirstName, string LastName, string StreetAddress, string ZipCode, string Town, string Email, string Phone, string CellPhone, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        SessionId,
                        UserId,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Email,
                        Phone,
                        CellPhone}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string UserExists(string SessionId, string UserId) {
            object[] results = this.Invoke("UserExists", new object[] {
                        SessionId,
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserExistsAsync(string SessionId, string UserId) {
            this.UserExistsAsync(SessionId, UserId, null);
        }
        
        /// <remarks/>
        public void UserExistsAsync(string SessionId, string UserId, object userState) {
            if ((this.UserExistsOperationCompleted == null)) {
                this.UserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserExistsOperationCompleted);
            }
            this.InvokeAsync("UserExists", new object[] {
                        SessionId,
                        UserId}, this.UserExistsOperationCompleted, userState);
        }
        
        private void OnUserExistsOperationCompleted(object arg) {
            if ((this.UserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public UserResult GetUser(string SessionId, string UserId) {
            object[] results = this.Invoke("GetUser", new object[] {
                        SessionId,
                        UserId});
            return ((UserResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAsync(string SessionId, string UserId) {
            this.GetUserAsync(SessionId, UserId, null);
        }
        
        /// <remarks/>
        public void GetUserAsync(string SessionId, string UserId, object userState) {
            if ((this.GetUserOperationCompleted == null)) {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        SessionId,
                        UserId}, this.GetUserOperationCompleted, userState);
        }
        
        private void OnGetUserOperationCompleted(object arg) {
            if ((this.GetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public Transaction GetTransactionById(string SessionId, int TransactionId) {
            object[] results = this.Invoke("GetTransactionById", new object[] {
                        SessionId,
                        TransactionId});
            return ((Transaction)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionByIdAsync(string SessionId, int TransactionId) {
            this.GetTransactionByIdAsync(SessionId, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetTransactionByIdAsync(string SessionId, int TransactionId, object userState) {
            if ((this.GetTransactionByIdOperationCompleted == null)) {
                this.GetTransactionByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionByIdOperationCompleted);
            }
            this.InvokeAsync("GetTransactionById", new object[] {
                        SessionId,
                        TransactionId}, this.GetTransactionByIdOperationCompleted, userState);
        }
        
        private void OnGetTransactionByIdOperationCompleted(object arg) {
            if ((this.GetTransactionByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionByIdCompleted(this, new GetTransactionByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public TransactionStatus GetTransactionStatus(string SessionId, string TransactionId) {
            object[] results = this.Invoke("GetTransactionStatus", new object[] {
                        SessionId,
                        TransactionId});
            return ((TransactionStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionStatusAsync(string SessionId, string TransactionId) {
            this.GetTransactionStatusAsync(SessionId, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetTransactionStatusAsync(string SessionId, string TransactionId, object userState) {
            if ((this.GetTransactionStatusOperationCompleted == null)) {
                this.GetTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("GetTransactionStatus", new object[] {
                        SessionId,
                        TransactionId}, this.GetTransactionStatusOperationCompleted, userState);
        }
        
        private void OnGetTransactionStatusOperationCompleted(object arg) {
            if ((this.GetTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionStatusCompleted(this, new GetTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Expiry")]
        public string GetServiceTimer(string SessionId, string UserId, string TimerName) {
            object[] results = this.Invoke("GetServiceTimer", new object[] {
                        SessionId,
                        UserId,
                        TimerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceTimerAsync(string SessionId, string UserId, string TimerName) {
            this.GetServiceTimerAsync(SessionId, UserId, TimerName, null);
        }
        
        /// <remarks/>
        public void GetServiceTimerAsync(string SessionId, string UserId, string TimerName, object userState) {
            if ((this.GetServiceTimerOperationCompleted == null)) {
                this.GetServiceTimerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceTimerOperationCompleted);
            }
            this.InvokeAsync("GetServiceTimer", new object[] {
                        SessionId,
                        UserId,
                        TimerName}, this.GetServiceTimerOperationCompleted, userState);
        }
        
        private void OnGetServiceTimerOperationCompleted(object arg) {
            if ((this.GetServiceTimerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceTimerCompleted(this, new GetServiceTimerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Expiry")]
        public string ModifyServiceTimer(string SessionId, string UserId, string TimerName, string Command, string TimeValue) {
            object[] results = this.Invoke("ModifyServiceTimer", new object[] {
                        SessionId,
                        UserId,
                        TimerName,
                        Command,
                        TimeValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyServiceTimerAsync(string SessionId, string UserId, string TimerName, string Command, string TimeValue) {
            this.ModifyServiceTimerAsync(SessionId, UserId, TimerName, Command, TimeValue, null);
        }
        
        /// <remarks/>
        public void ModifyServiceTimerAsync(string SessionId, string UserId, string TimerName, string Command, string TimeValue, object userState) {
            if ((this.ModifyServiceTimerOperationCompleted == null)) {
                this.ModifyServiceTimerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyServiceTimerOperationCompleted);
            }
            this.InvokeAsync("ModifyServiceTimer", new object[] {
                        SessionId,
                        UserId,
                        TimerName,
                        Command,
                        TimeValue}, this.ModifyServiceTimerOperationCompleted, userState);
        }
        
        private void OnModifyServiceTimerOperationCompleted(object arg) {
            if ((this.ModifyServiceTimerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyServiceTimerCompleted(this, new ModifyServiceTimerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("AgentId")]
        public string Ping(string SessionId) {
            object[] results = this.Invoke("Ping", new object[] {
                        SessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync(string SessionId) {
            this.PingAsync(SessionId, null);
        }
        
        /// <remarks/>
        public void PingAsync(string SessionId, object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[] {
                        SessionId}, this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string DestroySession(string SessionId) {
            object[] results = this.Invoke("DestroySession", new object[] {
                        SessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DestroySessionAsync(string SessionId) {
            this.DestroySessionAsync(SessionId, null);
        }
        
        /// <remarks/>
        public void DestroySessionAsync(string SessionId, object userState) {
            if ((this.DestroySessionOperationCompleted == null)) {
                this.DestroySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDestroySessionOperationCompleted);
            }
            this.InvokeAsync("DestroySession", new object[] {
                        SessionId}, this.DestroySessionOperationCompleted, userState);
        }
        
        private void OnDestroySessionOperationCompleted(object arg) {
            if ((this.DestroySessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DestroySessionCompleted(this, new DestroySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("SessionId")]
        public string CreateSession(string AgentId, string Password) {
            object[] results = this.Invoke("CreateSession", new object[] {
                        AgentId,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSessionAsync(string AgentId, string Password) {
            this.CreateSessionAsync(AgentId, Password, null);
        }
        
        /// <remarks/>
        public void CreateSessionAsync(string AgentId, string Password, object userState) {
            if ((this.CreateSessionOperationCompleted == null)) {
                this.CreateSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSessionOperationCompleted);
            }
            this.InvokeAsync("CreateSession", new object[] {
                        AgentId,
                        Password}, this.CreateSessionOperationCompleted, userState);
        }
        
        private void OnCreateSessionOperationCompleted(object arg) {
            if ((this.CreateSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSessionCompleted(this, new CreateSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("SessionId")]
        public string CreateSessionEx(string UserId, string Password, string AgentId) {
            object[] results = this.Invoke("CreateSessionEx", new object[] {
                        UserId,
                        Password,
                        AgentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSessionExAsync(string UserId, string Password, string AgentId) {
            this.CreateSessionExAsync(UserId, Password, AgentId, null);
        }
        
        /// <remarks/>
        public void CreateSessionExAsync(string UserId, string Password, string AgentId, object userState) {
            if ((this.CreateSessionExOperationCompleted == null)) {
                this.CreateSessionExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSessionExOperationCompleted);
            }
            this.InvokeAsync("CreateSessionEx", new object[] {
                        UserId,
                        Password,
                        AgentId}, this.CreateSessionExOperationCompleted, userState);
        }
        
        private void OnCreateSessionExOperationCompleted(object arg) {
            if ((this.CreateSessionExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSessionExCompleted(this, new CreateSessionExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("SessionIdOut")]
        public string ChangeSessionId(string SessionId, string SessionIdNew) {
            object[] results = this.Invoke("ChangeSessionId", new object[] {
                        SessionId,
                        SessionIdNew});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeSessionIdAsync(string SessionId, string SessionIdNew) {
            this.ChangeSessionIdAsync(SessionId, SessionIdNew, null);
        }
        
        /// <remarks/>
        public void ChangeSessionIdAsync(string SessionId, string SessionIdNew, object userState) {
            if ((this.ChangeSessionIdOperationCompleted == null)) {
                this.ChangeSessionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSessionIdOperationCompleted);
            }
            this.InvokeAsync("ChangeSessionId", new object[] {
                        SessionId,
                        SessionIdNew}, this.ChangeSessionIdOperationCompleted, userState);
        }
        
        private void OnChangeSessionIdOperationCompleted(object arg) {
            if ((this.ChangeSessionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSessionIdCompleted(this, new ChangeSessionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int SimpleDebitEx(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp, string Currency) {
            object[] results = this.Invoke("SimpleDebitEx", new object[] {
                        SessionId,
                        UserToken,
                        Cost,
                        Vat,
                        Description,
                        ClientIp,
                        Currency});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SimpleDebitExAsync(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp, string Currency) {
            this.SimpleDebitExAsync(SessionId, UserToken, Cost, Vat, Description, ClientIp, Currency, null);
        }
        
        /// <remarks/>
        public void SimpleDebitExAsync(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp, string Currency, object userState) {
            if ((this.SimpleDebitExOperationCompleted == null)) {
                this.SimpleDebitExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleDebitExOperationCompleted);
            }
            this.InvokeAsync("SimpleDebitEx", new object[] {
                        SessionId,
                        UserToken,
                        Cost,
                        Vat,
                        Description,
                        ClientIp,
                        Currency}, this.SimpleDebitExOperationCompleted, userState);
        }
        
        private void OnSimpleDebitExOperationCompleted(object arg) {
            if ((this.SimpleDebitExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleDebitExCompleted(this, new SimpleDebitExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int SimpleDebit(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp) {
            object[] results = this.Invoke("SimpleDebit", new object[] {
                        SessionId,
                        UserToken,
                        Cost,
                        Vat,
                        Description,
                        ClientIp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SimpleDebitAsync(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp) {
            this.SimpleDebitAsync(SessionId, UserToken, Cost, Vat, Description, ClientIp, null);
        }
        
        /// <remarks/>
        public void SimpleDebitAsync(string SessionId, string UserToken, double Cost, double Vat, string Description, string ClientIp, object userState) {
            if ((this.SimpleDebitOperationCompleted == null)) {
                this.SimpleDebitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleDebitOperationCompleted);
            }
            this.InvokeAsync("SimpleDebit", new object[] {
                        SessionId,
                        UserToken,
                        Cost,
                        Vat,
                        Description,
                        ClientIp}, this.SimpleDebitOperationCompleted, userState);
        }
        
        private void OnSimpleDebitOperationCompleted(object arg) {
            if ((this.SimpleDebitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleDebitCompleted(this, new SimpleDebitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreateInvoiceEntry(
                    string SessionId, 
                    double Cost, 
                    double Vat, 
                    string Description, 
                    string ClientIp, 
                    string Currency, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    string Company, 
                    string CountryId) {
            object[] results = this.Invoke("CreateInvoiceEntry", new object[] {
                        SessionId,
                        Cost,
                        Vat,
                        Description,
                        ClientIp,
                        Currency,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Phone,
                        Email,
                        PersonalId,
                        CellPhone,
                        Company,
                        CountryId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateInvoiceEntryAsync(
                    string SessionId, 
                    double Cost, 
                    double Vat, 
                    string Description, 
                    string ClientIp, 
                    string Currency, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    string Company, 
                    string CountryId) {
            this.CreateInvoiceEntryAsync(SessionId, Cost, Vat, Description, ClientIp, Currency, FirstName, LastName, StreetAddress, ZipCode, Town, Phone, Email, PersonalId, CellPhone, Company, CountryId, null);
        }
        
        /// <remarks/>
        public void CreateInvoiceEntryAsync(
                    string SessionId, 
                    double Cost, 
                    double Vat, 
                    string Description, 
                    string ClientIp, 
                    string Currency, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    string Company, 
                    string CountryId, 
                    object userState) {
            if ((this.CreateInvoiceEntryOperationCompleted == null)) {
                this.CreateInvoiceEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateInvoiceEntryOperationCompleted);
            }
            this.InvokeAsync("CreateInvoiceEntry", new object[] {
                        SessionId,
                        Cost,
                        Vat,
                        Description,
                        ClientIp,
                        Currency,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Phone,
                        Email,
                        PersonalId,
                        CellPhone,
                        Company,
                        CountryId}, this.CreateInvoiceEntryOperationCompleted, userState);
        }
        
        private void OnCreateInvoiceEntryOperationCompleted(object arg) {
            if ((this.CreateInvoiceEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateInvoiceEntryCompleted(this, new CreateInvoiceEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("UserId")]
        public string RegisterUser(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    int IsCompany, 
                    string Company, 
                    string CountryId, 
                    string LanguageId, 
                    int Gender, 
                    string ClientIp, 
                    int TariffId, 
                    string CustomerId, 
                    string RegisterOptions) {
            object[] results = this.Invoke("RegisterUser", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Phone,
                        Email,
                        PersonalId,
                        CellPhone,
                        IsCompany,
                        Company,
                        CountryId,
                        LanguageId,
                        Gender,
                        ClientIp,
                        TariffId,
                        CustomerId,
                        RegisterOptions});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterUserAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    int IsCompany, 
                    string Company, 
                    string CountryId, 
                    string LanguageId, 
                    int Gender, 
                    string ClientIp, 
                    int TariffId, 
                    string CustomerId, 
                    string RegisterOptions) {
            this.RegisterUserAsync(SessionId, FirstName, LastName, StreetAddress, ZipCode, Town, Phone, Email, PersonalId, CellPhone, IsCompany, Company, CountryId, LanguageId, Gender, ClientIp, TariffId, CustomerId, RegisterOptions, null);
        }
        
        /// <remarks/>
        public void RegisterUserAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string StreetAddress, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string Email, 
                    string PersonalId, 
                    string CellPhone, 
                    int IsCompany, 
                    string Company, 
                    string CountryId, 
                    string LanguageId, 
                    int Gender, 
                    string ClientIp, 
                    int TariffId, 
                    string CustomerId, 
                    string RegisterOptions, 
                    object userState) {
            if ((this.RegisterUserOperationCompleted == null)) {
                this.RegisterUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterUserOperationCompleted);
            }
            this.InvokeAsync("RegisterUser", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        StreetAddress,
                        ZipCode,
                        Town,
                        Phone,
                        Email,
                        PersonalId,
                        CellPhone,
                        IsCompany,
                        Company,
                        CountryId,
                        LanguageId,
                        Gender,
                        ClientIp,
                        TariffId,
                        CustomerId,
                        RegisterOptions}, this.RegisterUserOperationCompleted, userState);
        }
        
        private void OnRegisterUserOperationCompleted(object arg) {
            if ((this.RegisterUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterUserCompleted(this, new RegisterUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public InitializeInfo Initialize(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string HttpAcceptHeader, 
                    string HttpUserAgentHeader, 
                    string ReferenceNumber, 
                    string Options) {
            object[] results = this.Invoke("Initialize", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        PostalCode,
                        City,
                        Country,
                        CardType,
                        CardNumber,
                        CvcCode,
                        ExpiryMonth,
                        ExpiryYear,
                        Email,
                        ClientIp,
                        Description,
                        Amount,
                        VatAmount,
                        Currency,
                        HttpAcceptHeader,
                        HttpUserAgentHeader,
                        ReferenceNumber,
                        Options});
            return ((InitializeInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InitializeAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string HttpAcceptHeader, 
                    string HttpUserAgentHeader, 
                    string ReferenceNumber, 
                    string Options) {
            this.InitializeAsync(SessionId, FirstName, LastName, Address1, Address2, PostalCode, City, Country, CardType, CardNumber, CvcCode, ExpiryMonth, ExpiryYear, Email, ClientIp, Description, Amount, VatAmount, Currency, HttpAcceptHeader, HttpUserAgentHeader, ReferenceNumber, Options, null);
        }
        
        /// <remarks/>
        public void InitializeAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string HttpAcceptHeader, 
                    string HttpUserAgentHeader, 
                    string ReferenceNumber, 
                    string Options, 
                    object userState) {
            if ((this.InitializeOperationCompleted == null)) {
                this.InitializeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeOperationCompleted);
            }
            this.InvokeAsync("Initialize", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        PostalCode,
                        City,
                        Country,
                        CardType,
                        CardNumber,
                        CvcCode,
                        ExpiryMonth,
                        ExpiryYear,
                        Email,
                        ClientIp,
                        Description,
                        Amount,
                        VatAmount,
                        Currency,
                        HttpAcceptHeader,
                        HttpUserAgentHeader,
                        ReferenceNumber,
                        Options}, this.InitializeOperationCompleted, userState);
        }
        
        private void OnInitializeOperationCompleted(object arg) {
            if ((this.InitializeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeCompleted(this, new InitializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public AuthorizeInfo Authorize3DS(string SessionId, string PaymentId, string PaRes, string Extra) {
            object[] results = this.Invoke("Authorize3DS", new object[] {
                        SessionId,
                        PaymentId,
                        PaRes,
                        Extra});
            return ((AuthorizeInfo)(results[0]));
        }
        
        /// <remarks/>
        public void Authorize3DSAsync(string SessionId, string PaymentId, string PaRes, string Extra) {
            this.Authorize3DSAsync(SessionId, PaymentId, PaRes, Extra, null);
        }
        
        /// <remarks/>
        public void Authorize3DSAsync(string SessionId, string PaymentId, string PaRes, string Extra, object userState) {
            if ((this.Authorize3DSOperationCompleted == null)) {
                this.Authorize3DSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorize3DSOperationCompleted);
            }
            this.InvokeAsync("Authorize3DS", new object[] {
                        SessionId,
                        PaymentId,
                        PaRes,
                        Extra}, this.Authorize3DSOperationCompleted, userState);
        }
        
        private void OnAuthorize3DSOperationCompleted(object arg) {
            if ((this.Authorize3DSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Authorize3DSCompleted(this, new Authorize3DSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public AuthorizeInfo Authorize(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string ReferenceNumber, 
                    string Options) {
            object[] results = this.Invoke("Authorize", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        PostalCode,
                        City,
                        Country,
                        CardType,
                        CardNumber,
                        CvcCode,
                        ExpiryMonth,
                        ExpiryYear,
                        Email,
                        ClientIp,
                        Description,
                        Amount,
                        VatAmount,
                        Currency,
                        ReferenceNumber,
                        Options});
            return ((AuthorizeInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string ReferenceNumber, 
                    string Options) {
            this.AuthorizeAsync(SessionId, FirstName, LastName, Address1, Address2, PostalCode, City, Country, CardType, CardNumber, CvcCode, ExpiryMonth, ExpiryYear, Email, ClientIp, Description, Amount, VatAmount, Currency, ReferenceNumber, Options, null);
        }
        
        /// <remarks/>
        public void AuthorizeAsync(
                    string SessionId, 
                    string FirstName, 
                    string LastName, 
                    string Address1, 
                    string Address2, 
                    string PostalCode, 
                    string City, 
                    string Country, 
                    int CardType, 
                    string CardNumber, 
                    string CvcCode, 
                    int ExpiryMonth, 
                    int ExpiryYear, 
                    string Email, 
                    string ClientIp, 
                    string Description, 
                    double Amount, 
                    double VatAmount, 
                    string Currency, 
                    string ReferenceNumber, 
                    string Options, 
                    object userState) {
            if ((this.AuthorizeOperationCompleted == null)) {
                this.AuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeOperationCompleted);
            }
            this.InvokeAsync("Authorize", new object[] {
                        SessionId,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        PostalCode,
                        City,
                        Country,
                        CardType,
                        CardNumber,
                        CvcCode,
                        ExpiryMonth,
                        ExpiryYear,
                        Email,
                        ClientIp,
                        Description,
                        Amount,
                        VatAmount,
                        Currency,
                        ReferenceNumber,
                        Options}, this.AuthorizeOperationCompleted, userState);
        }
        
        private void OnAuthorizeOperationCompleted(object arg) {
            if ((this.AuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeCompleted(this, new AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public SettleInfo Settle(string SessionId, string PaymentId, double Amount) {
            object[] results = this.Invoke("Settle", new object[] {
                        SessionId,
                        PaymentId,
                        Amount});
            return ((SettleInfo)(results[0]));
        }
        
        /// <remarks/>
        public void SettleAsync(string SessionId, string PaymentId, double Amount) {
            this.SettleAsync(SessionId, PaymentId, Amount, null);
        }
        
        /// <remarks/>
        public void SettleAsync(string SessionId, string PaymentId, double Amount, object userState) {
            if ((this.SettleOperationCompleted == null)) {
                this.SettleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSettleOperationCompleted);
            }
            this.InvokeAsync("Settle", new object[] {
                        SessionId,
                        PaymentId,
                        Amount}, this.SettleOperationCompleted, userState);
        }
        
        private void OnSettleOperationCompleted(object arg) {
            if ((this.SettleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SettleCompleted(this, new SettleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public RefundInfo Refund(string SessionId, string PaymentId, string Reason, double Amount) {
            object[] results = this.Invoke("Refund", new object[] {
                        SessionId,
                        PaymentId,
                        Reason,
                        Amount});
            return ((RefundInfo)(results[0]));
        }
        
        /// <remarks/>
        public void RefundAsync(string SessionId, string PaymentId, string Reason, double Amount) {
            this.RefundAsync(SessionId, PaymentId, Reason, Amount, null);
        }
        
        /// <remarks/>
        public void RefundAsync(string SessionId, string PaymentId, string Reason, double Amount, object userState) {
            if ((this.RefundOperationCompleted == null)) {
                this.RefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundOperationCompleted);
            }
            this.InvokeAsync("Refund", new object[] {
                        SessionId,
                        PaymentId,
                        Reason,
                        Amount}, this.RefundOperationCompleted, userState);
        }
        
        private void OnRefundOperationCompleted(object arg) {
            if ((this.RefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundCompleted(this, new RefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public AuthReverseInfo AuthReverse(string SessionId, string PaymentId, double Amount) {
            object[] results = this.Invoke("AuthReverse", new object[] {
                        SessionId,
                        PaymentId,
                        Amount});
            return ((AuthReverseInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AuthReverseAsync(string SessionId, string PaymentId, double Amount) {
            this.AuthReverseAsync(SessionId, PaymentId, Amount, null);
        }
        
        /// <remarks/>
        public void AuthReverseAsync(string SessionId, string PaymentId, double Amount, object userState) {
            if ((this.AuthReverseOperationCompleted == null)) {
                this.AuthReverseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthReverseOperationCompleted);
            }
            this.InvokeAsync("AuthReverse", new object[] {
                        SessionId,
                        PaymentId,
                        Amount}, this.AuthReverseOperationCompleted, userState);
        }
        
        private void OnAuthReverseOperationCompleted(object arg) {
            if ((this.AuthReverseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthReverseCompleted(this, new AuthReverseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("UserId")]
        public string GetUserIdByDialCode(string SessionId, string DialCode) {
            object[] results = this.Invoke("GetUserIdByDialCode", new object[] {
                        SessionId,
                        DialCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIdByDialCodeAsync(string SessionId, string DialCode) {
            this.GetUserIdByDialCodeAsync(SessionId, DialCode, null);
        }
        
        /// <remarks/>
        public void GetUserIdByDialCodeAsync(string SessionId, string DialCode, object userState) {
            if ((this.GetUserIdByDialCodeOperationCompleted == null)) {
                this.GetUserIdByDialCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIdByDialCodeOperationCompleted);
            }
            this.InvokeAsync("GetUserIdByDialCode", new object[] {
                        SessionId,
                        DialCode}, this.GetUserIdByDialCodeOperationCompleted, userState);
        }
        
        private void OnGetUserIdByDialCodeOperationCompleted(object arg) {
            if ((this.GetUserIdByDialCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIdByDialCodeCompleted(this, new GetUserIdByDialCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public PhoneCallInfo CreateDialCode(string SessionId, string ServiceName, string Description, double Price, double Vat, string Email, string ClientIp) {
            object[] results = this.Invoke("CreateDialCode", new object[] {
                        SessionId,
                        ServiceName,
                        Description,
                        Price,
                        Vat,
                        Email,
                        ClientIp});
            return ((PhoneCallInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDialCodeAsync(string SessionId, string ServiceName, string Description, double Price, double Vat, string Email, string ClientIp) {
            this.CreateDialCodeAsync(SessionId, ServiceName, Description, Price, Vat, Email, ClientIp, null);
        }
        
        /// <remarks/>
        public void CreateDialCodeAsync(string SessionId, string ServiceName, string Description, double Price, double Vat, string Email, string ClientIp, object userState) {
            if ((this.CreateDialCodeOperationCompleted == null)) {
                this.CreateDialCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDialCodeOperationCompleted);
            }
            this.InvokeAsync("CreateDialCode", new object[] {
                        SessionId,
                        ServiceName,
                        Description,
                        Price,
                        Vat,
                        Email,
                        ClientIp}, this.CreateDialCodeOperationCompleted, userState);
        }
        
        private void OnCreateDialCodeOperationCompleted(object arg) {
            if ((this.CreateDialCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDialCodeCompleted(this, new CreateDialCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int SimpleRefund(string SessionId, int TransactionId, string Reason, double Amount) {
            object[] results = this.Invoke("SimpleRefund", new object[] {
                        SessionId,
                        TransactionId,
                        Reason,
                        Amount});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SimpleRefundAsync(string SessionId, int TransactionId, string Reason, double Amount) {
            this.SimpleRefundAsync(SessionId, TransactionId, Reason, Amount, null);
        }
        
        /// <remarks/>
        public void SimpleRefundAsync(string SessionId, int TransactionId, string Reason, double Amount, object userState) {
            if ((this.SimpleRefundOperationCompleted == null)) {
                this.SimpleRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleRefundOperationCompleted);
            }
            this.InvokeAsync("SimpleRefund", new object[] {
                        SessionId,
                        TransactionId,
                        Reason,
                        Amount}, this.SimpleRefundOperationCompleted, userState);
        }
        
        private void OnSimpleRefundOperationCompleted(object arg) {
            if ((this.SimpleRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleRefundCompleted(this, new SimpleRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("AgentId")]
        public string UpdatePartner(
                    string SessionId, 
                    int PartnerId, 
                    string OrgNumber, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string ZipCode, 
                    string Town, 
                    string CountryId, 
                    string Telephone, 
                    string Telefax, 
                    string EconomyContactEmail, 
                    string TechnicalContactEmail, 
                    string CustomerContactEmail, 
                    string URL, 
                    string AccountType, 
                    string Account, 
                    string Options) {
            object[] results = this.Invoke("UpdatePartner", new object[] {
                        SessionId,
                        PartnerId,
                        OrgNumber,
                        Name,
                        Address1,
                        Address2,
                        ZipCode,
                        Town,
                        CountryId,
                        Telephone,
                        Telefax,
                        EconomyContactEmail,
                        TechnicalContactEmail,
                        CustomerContactEmail,
                        URL,
                        AccountType,
                        Account,
                        Options});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePartnerAsync(
                    string SessionId, 
                    int PartnerId, 
                    string OrgNumber, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string ZipCode, 
                    string Town, 
                    string CountryId, 
                    string Telephone, 
                    string Telefax, 
                    string EconomyContactEmail, 
                    string TechnicalContactEmail, 
                    string CustomerContactEmail, 
                    string URL, 
                    string AccountType, 
                    string Account, 
                    string Options) {
            this.UpdatePartnerAsync(SessionId, PartnerId, OrgNumber, Name, Address1, Address2, ZipCode, Town, CountryId, Telephone, Telefax, EconomyContactEmail, TechnicalContactEmail, CustomerContactEmail, URL, AccountType, Account, Options, null);
        }
        
        /// <remarks/>
        public void UpdatePartnerAsync(
                    string SessionId, 
                    int PartnerId, 
                    string OrgNumber, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string ZipCode, 
                    string Town, 
                    string CountryId, 
                    string Telephone, 
                    string Telefax, 
                    string EconomyContactEmail, 
                    string TechnicalContactEmail, 
                    string CustomerContactEmail, 
                    string URL, 
                    string AccountType, 
                    string Account, 
                    string Options, 
                    object userState) {
            if ((this.UpdatePartnerOperationCompleted == null)) {
                this.UpdatePartnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePartnerOperationCompleted);
            }
            this.InvokeAsync("UpdatePartner", new object[] {
                        SessionId,
                        PartnerId,
                        OrgNumber,
                        Name,
                        Address1,
                        Address2,
                        ZipCode,
                        Town,
                        CountryId,
                        Telephone,
                        Telefax,
                        EconomyContactEmail,
                        TechnicalContactEmail,
                        CustomerContactEmail,
                        URL,
                        AccountType,
                        Account,
                        Options}, this.UpdatePartnerOperationCompleted, userState);
        }
        
        private void OnUpdatePartnerOperationCompleted(object arg) {
            if ((this.UpdatePartnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePartnerCompleted(this, new UpdatePartnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreateDirectOrder(
                    string SessionId, 
                    string OrderNumber, 
                    double OrderTotal, 
                    string Description, 
                    string Message, 
                    string CustomerId, 
                    string FirstName, 
                    string LastName, 
                    string CoAddress, 
                    string Address, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string CellPhone, 
                    string Email, 
                    string PersonalId, 
                    string Company, 
                    string CountryId, 
                    string Currency, 
                    string ClientIp, 
                    OrderEntry[] OrderEntries, 
                    string Options) {
            object[] results = this.Invoke("CreateDirectOrder", new object[] {
                        SessionId,
                        OrderNumber,
                        OrderTotal,
                        Description,
                        Message,
                        CustomerId,
                        FirstName,
                        LastName,
                        CoAddress,
                        Address,
                        ZipCode,
                        Town,
                        Phone,
                        CellPhone,
                        Email,
                        PersonalId,
                        Company,
                        CountryId,
                        Currency,
                        ClientIp,
                        OrderEntries,
                        Options});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDirectOrderAsync(
                    string SessionId, 
                    string OrderNumber, 
                    double OrderTotal, 
                    string Description, 
                    string Message, 
                    string CustomerId, 
                    string FirstName, 
                    string LastName, 
                    string CoAddress, 
                    string Address, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string CellPhone, 
                    string Email, 
                    string PersonalId, 
                    string Company, 
                    string CountryId, 
                    string Currency, 
                    string ClientIp, 
                    OrderEntry[] OrderEntries, 
                    string Options) {
            this.CreateDirectOrderAsync(SessionId, OrderNumber, OrderTotal, Description, Message, CustomerId, FirstName, LastName, CoAddress, Address, ZipCode, Town, Phone, CellPhone, Email, PersonalId, Company, CountryId, Currency, ClientIp, OrderEntries, Options, null);
        }
        
        /// <remarks/>
        public void CreateDirectOrderAsync(
                    string SessionId, 
                    string OrderNumber, 
                    double OrderTotal, 
                    string Description, 
                    string Message, 
                    string CustomerId, 
                    string FirstName, 
                    string LastName, 
                    string CoAddress, 
                    string Address, 
                    string ZipCode, 
                    string Town, 
                    string Phone, 
                    string CellPhone, 
                    string Email, 
                    string PersonalId, 
                    string Company, 
                    string CountryId, 
                    string Currency, 
                    string ClientIp, 
                    OrderEntry[] OrderEntries, 
                    string Options, 
                    object userState) {
            if ((this.CreateDirectOrderOperationCompleted == null)) {
                this.CreateDirectOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDirectOrderOperationCompleted);
            }
            this.InvokeAsync("CreateDirectOrder", new object[] {
                        SessionId,
                        OrderNumber,
                        OrderTotal,
                        Description,
                        Message,
                        CustomerId,
                        FirstName,
                        LastName,
                        CoAddress,
                        Address,
                        ZipCode,
                        Town,
                        Phone,
                        CellPhone,
                        Email,
                        PersonalId,
                        Company,
                        CountryId,
                        Currency,
                        ClientIp,
                        OrderEntries,
                        Options}, this.CreateDirectOrderOperationCompleted, userState);
        }
        
        private void OnCreateDirectOrderOperationCompleted(object arg) {
            if ((this.CreateDirectOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDirectOrderCompleted(this, new CreateDirectOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int AddArticle(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options) {
            object[] results = this.Invoke("AddArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        ArticleDescription,
                        ArticleTemplate,
                        Periodicity,
                        Period,
                        Price,
                        Unit,
                        Vat,
                        CustomerAccountId,
                        Options});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddArticleAsync(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options) {
            this.AddArticleAsync(SessionId, ArticleNo, ArticleDescription, ArticleTemplate, Periodicity, Period, Price, Unit, Vat, CustomerAccountId, Options, null);
        }
        
        /// <remarks/>
        public void AddArticleAsync(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options, object userState) {
            if ((this.AddArticleOperationCompleted == null)) {
                this.AddArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddArticleOperationCompleted);
            }
            this.InvokeAsync("AddArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        ArticleDescription,
                        ArticleTemplate,
                        Periodicity,
                        Period,
                        Price,
                        Unit,
                        Vat,
                        CustomerAccountId,
                        Options}, this.AddArticleOperationCompleted, userState);
        }
        
        private void OnAddArticleOperationCompleted(object arg) {
            if ((this.AddArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddArticleCompleted(this, new AddArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DeleteArticle(string SessionId, string ArticleNo, string Options) {
            object[] results = this.Invoke("DeleteArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        Options});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteArticleAsync(string SessionId, string ArticleNo, string Options) {
            this.DeleteArticleAsync(SessionId, ArticleNo, Options, null);
        }
        
        /// <remarks/>
        public void DeleteArticleAsync(string SessionId, string ArticleNo, string Options, object userState) {
            if ((this.DeleteArticleOperationCompleted == null)) {
                this.DeleteArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteArticleOperationCompleted);
            }
            this.InvokeAsync("DeleteArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        Options}, this.DeleteArticleOperationCompleted, userState);
        }
        
        private void OnDeleteArticleOperationCompleted(object arg) {
            if ((this.DeleteArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteArticleCompleted(this, new DeleteArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int UpdateArticle(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options) {
            object[] results = this.Invoke("UpdateArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        ArticleDescription,
                        ArticleTemplate,
                        Periodicity,
                        Period,
                        Price,
                        Unit,
                        Vat,
                        CustomerAccountId,
                        Options});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateArticleAsync(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options) {
            this.UpdateArticleAsync(SessionId, ArticleNo, ArticleDescription, ArticleTemplate, Periodicity, Period, Price, Unit, Vat, CustomerAccountId, Options, null);
        }
        
        /// <remarks/>
        public void UpdateArticleAsync(string SessionId, string ArticleNo, string ArticleDescription, string ArticleTemplate, string Periodicity, int Period, double Price, string Unit, double Vat, string CustomerAccountId, string Options, object userState) {
            if ((this.UpdateArticleOperationCompleted == null)) {
                this.UpdateArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateArticleOperationCompleted);
            }
            this.InvokeAsync("UpdateArticle", new object[] {
                        SessionId,
                        ArticleNo,
                        ArticleDescription,
                        ArticleTemplate,
                        Periodicity,
                        Period,
                        Price,
                        Unit,
                        Vat,
                        CustomerAccountId,
                        Options}, this.UpdateArticleOperationCompleted, userState);
        }
        
        private void OnUpdateArticleOperationCompleted(object arg) {
            if ((this.UpdateArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateArticleCompleted(this, new UpdateArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://secure.pay-read.se", ResponseNamespace="https://secure.pay-read.se")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int Charge(string SessionId, string ArticleNo, int Quantity, string Options) {
            object[] results = this.Invoke("Charge", new object[] {
                        SessionId,
                        ArticleNo,
                        Quantity,
                        Options});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeAsync(string SessionId, string ArticleNo, int Quantity, string Options) {
            this.ChargeAsync(SessionId, ArticleNo, Quantity, Options, null);
        }
        
        /// <remarks/>
        public void ChargeAsync(string SessionId, string ArticleNo, int Quantity, string Options, object userState) {
            if ((this.ChargeOperationCompleted == null)) {
                this.ChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeOperationCompleted);
            }
            this.InvokeAsync("Charge", new object[] {
                        SessionId,
                        ArticleNo,
                        Quantity,
                        Options}, this.ChargeOperationCompleted, userState);
        }
        
        private void OnChargeOperationCompleted(object arg) {
            if ((this.ChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeCompleted(this, new ChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class UserResult {
        
        private string idField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string streetAddressField;
        
        private string zipCodeField;
        
        private string townField;
        
        private string phoneField;
        
        private string cellPhoneField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string StreetAddress {
            get {
                return this.streetAddressField;
            }
            set {
                this.streetAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ZipCode {
            get {
                return this.zipCodeField;
            }
            set {
                this.zipCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Town {
            get {
                return this.townField;
            }
            set {
                this.townField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class OrderEntry {
        
        private string entryTypeField;
        
        private int positionField;
        
        private string descriptionField;
        
        private string itemNumberField;
        
        private string accountField;
        
        private string unitField;
        
        private int unitQtyField;
        
        private double priceField;
        
        private double subTotalField;
        
        private double vatPercentageField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string EntryType {
            get {
                return this.entryTypeField;
            }
            set {
                this.entryTypeField = value;
            }
        }
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ItemNumber {
            get {
                return this.itemNumberField;
            }
            set {
                this.itemNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Account {
            get {
                return this.accountField;
            }
            set {
                this.accountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        public int UnitQty {
            get {
                return this.unitQtyField;
            }
            set {
                this.unitQtyField = value;
            }
        }
        
        /// <remarks/>
        public double Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
            }
        }
        
        /// <remarks/>
        public double SubTotal {
            get {
                return this.subTotalField;
            }
            set {
                this.subTotalField = value;
            }
        }
        
        /// <remarks/>
        public double VatPercentage {
            get {
                return this.vatPercentageField;
            }
            set {
                this.vatPercentageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class PhoneCallInfo {
        
        private string dialCodeField;
        
        private string resumeIdField;
        
        private string phoneNumberField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DialCode {
            get {
                return this.dialCodeField;
            }
            set {
                this.dialCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResumeId {
            get {
                return this.resumeIdField;
            }
            set {
                this.resumeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class AuthReverseInfo {
        
        private string paymentIdField;
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaymentId {
            get {
                return this.paymentIdField;
            }
            set {
                this.paymentIdField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class RefundInfo {
        
        private string paymentIdField;
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaymentId {
            get {
                return this.paymentIdField;
            }
            set {
                this.paymentIdField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class SettleInfo {
        
        private string paymentIdField;
        
        private int chargeLogIdField;
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaymentId {
            get {
                return this.paymentIdField;
            }
            set {
                this.paymentIdField = value;
            }
        }
        
        /// <remarks/>
        public int ChargeLogId {
            get {
                return this.chargeLogIdField;
            }
            set {
                this.chargeLogIdField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class AuthorizeInfo {
        
        private string paymentIdField;
        
        private string authCodeField;
        
        private string authCodeRespField;
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaymentId {
            get {
                return this.paymentIdField;
            }
            set {
                this.paymentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string AuthCodeResp {
            get {
                return this.authCodeRespField;
            }
            set {
                this.authCodeRespField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class InitializeInfo {
        
        private string paymentIdField;
        
        private string paReqField;
        
        private string acsUrlField;
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaymentId {
            get {
                return this.paymentIdField;
            }
            set {
                this.paymentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string PaReq {
            get {
                return this.paReqField;
            }
            set {
                this.paReqField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string AcsUrl {
            get {
                return this.acsUrlField;
            }
            set {
                this.acsUrlField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class TransactionStatus {
        
        private int transactionIdField;
        
        private double costField;
        
        private double paidField;
        
        private double vatField;
        
        private string currencyField;
        
        private string descriptionField;
        
        private string customerAccountField;
        
        private string userIdField;
        
        private int isDebitedField;
        
        private int isTestField;
        
        private string typeField;
        
        private string nameField;
        
        /// <remarks/>
        public int TransactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
        /// <remarks/>
        public double Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
        
        /// <remarks/>
        public double Paid {
            get {
                return this.paidField;
            }
            set {
                this.paidField = value;
            }
        }
        
        /// <remarks/>
        public double Vat {
            get {
                return this.vatField;
            }
            set {
                this.vatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CustomerAccount {
            get {
                return this.customerAccountField;
            }
            set {
                this.customerAccountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public int IsDebited {
            get {
                return this.isDebitedField;
            }
            set {
                this.isDebitedField = value;
            }
        }
        
        /// <remarks/>
        public int IsTest {
            get {
                return this.isTestField;
            }
            set {
                this.isTestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="https://secure.pay-read.se")]
    public partial class Transaction {
        
        private double costField;
        
        private double vatField;
        
        private string descriptionField;
        
        private string customerAccountField;
        
        private string userIdField;
        
        private int isDebitedField;
        
        private int isTestField;
        
        /// <remarks/>
        public double Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
        
        /// <remarks/>
        public double Vat {
            get {
                return this.vatField;
            }
            set {
                this.vatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string CustomerAccount {
            get {
                return this.customerAccountField;
            }
            set {
                this.customerAccountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public int IsDebited {
            get {
                return this.isDebitedField;
            }
            set {
                this.isDebitedField = value;
            }
        }
        
        /// <remarks/>
        public int IsTest {
            get {
                return this.isTestField;
            }
            set {
                this.isTestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestAddIntCompletedEventHandler(object sender, TestAddIntCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestAddIntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestAddIntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserIdByTransactionIdCompletedEventHandler(object sender, GetUserIdByTransactionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIdByTransactionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIdByTransactionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserTokenByLoginInfoCompletedEventHandler(object sender, GetUserTokenByLoginInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTokenByLoginInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTokenByLoginInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserTokenByUserIdCompletedEventHandler(object sender, GetUserTokenByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTokenByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTokenByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetCustomerIdCompletedEventHandler(object sender, SetCustomerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCustomerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCustomerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTariffCompletedEventHandler(object sender, GetTariffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTariffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTariffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetTariffCompletedEventHandler(object sender, SetTariffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTariffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTariffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UserExistsCompletedEventHandler(object sender, UserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionByIdCompletedEventHandler(object sender, GetTransactionByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionStatusCompletedEventHandler(object sender, GetTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransactionStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceTimerCompletedEventHandler(object sender, GetServiceTimerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceTimerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceTimerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ModifyServiceTimerCompletedEventHandler(object sender, ModifyServiceTimerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyServiceTimerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyServiceTimerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DestroySessionCompletedEventHandler(object sender, DestroySessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DestroySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DestroySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSessionCompletedEventHandler(object sender, CreateSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSessionExCompletedEventHandler(object sender, CreateSessionExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSessionExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSessionExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeSessionIdCompletedEventHandler(object sender, ChangeSessionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SimpleDebitExCompletedEventHandler(object sender, SimpleDebitExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimpleDebitExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleDebitExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SimpleDebitCompletedEventHandler(object sender, SimpleDebitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimpleDebitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleDebitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateInvoiceEntryCompletedEventHandler(object sender, CreateInvoiceEntryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateInvoiceEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateInvoiceEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterUserCompletedEventHandler(object sender, RegisterUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitializeCompletedEventHandler(object sender, InitializeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitializeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitializeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InitializeInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InitializeInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Authorize3DSCompletedEventHandler(object sender, Authorize3DSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Authorize3DSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Authorize3DSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthorizeInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizeInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeCompletedEventHandler(object sender, AuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthorizeInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizeInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SettleCompletedEventHandler(object sender, SettleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SettleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SettleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SettleInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SettleInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RefundCompletedEventHandler(object sender, RefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RefundInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RefundInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthReverseCompletedEventHandler(object sender, AuthReverseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthReverseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthReverseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthReverseInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthReverseInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserIdByDialCodeCompletedEventHandler(object sender, GetUserIdByDialCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIdByDialCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIdByDialCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateDialCodeCompletedEventHandler(object sender, CreateDialCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDialCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDialCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PhoneCallInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PhoneCallInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SimpleRefundCompletedEventHandler(object sender, SimpleRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimpleRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePartnerCompletedEventHandler(object sender, UpdatePartnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePartnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePartnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateDirectOrderCompletedEventHandler(object sender, CreateDirectOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDirectOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDirectOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddArticleCompletedEventHandler(object sender, AddArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteArticleCompletedEventHandler(object sender, DeleteArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateArticleCompletedEventHandler(object sender, UpdateArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChargeCompletedEventHandler(object sender, ChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591